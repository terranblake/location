name: changed-test-videos
on:
  pull_request:
    # Run on all PRs to ensure we catch new test files
    types: [opened, synchronize, reopened]

jobs:
  record:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          playwright install --with-deps
      - name: Detect changed tests
        id: changed
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          echo "Comparing base branch: ${{ github.event.pull_request.base.ref }} with current commit: ${{ github.sha }}"
          
          # Get all current test files
          CURRENT_FILES=$(git ls-files tests/ | grep '\.py$' | sort)
          
          # Get all test files from the base branch
          BASE_FILES=$(git ls-tree -r --name-only origin/${{ github.event.pull_request.base.ref }} -- tests/ | grep '\.py$' | sort)
          
          # Find new test files (in current but not in base)
          NEW_FILES=$(comm -23 <(echo "$CURRENT_FILES") <(echo "$BASE_FILES") || true)
          
          # Find modified test files
          MODIFIED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} -- 'tests/**/*.py' || true)
          
          # Combine both lists
          CHANGED="$NEW_FILES"$'\n'"$MODIFIED_FILES"
          
          # Remove empty lines and duplicates
          CHANGED=$(echo "$CHANGED" | grep -v '^$' | sort | uniq || true)
          
          echo "Changed test files:"
          echo "$CHANGED"
          
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Run changed tests
        if: steps.changed.outputs.files != ''
        env:
          PLAYWRIGHT_VIDEO_MODE: on
        run: |
          mkdir -p test-videos
          echo "Running tests: ${{ steps.changed.outputs.files }}"
          # Convert multiline output to space-separated list
          TEST_FILES=$(echo "${{ steps.changed.outputs.files }}" | tr '\n' ' ')
          echo "Test files to run: $TEST_FILES"
          python -m pytest -v $TEST_FILES --video=on --output=test-videos
      - name: Process videos for comment
        if: steps.changed.outputs.files != ''
        id: process-videos
        run: |
          # Find all video files
          VIDEO_FILES=$(find test-videos -name "*.webm" -o -name "*.mp4" | head -10)
          echo "Found video files:"
          echo "$VIDEO_FILES"
          
          # Count total videos
          TOTAL_COUNT=$(find test-videos -name "*.webm" -o -name "*.mp4" | wc -l)
          echo "Total video count: $TOTAL_COUNT"
          
          # Get first 3 videos for embedding
          FIRST_THREE=$(echo "$VIDEO_FILES" | head -3)
          echo "First three videos:"
          echo "$FIRST_THREE"
          
          # Set outputs
          echo "total_count=$TOTAL_COUNT" >> "$GITHUB_OUTPUT"
          echo "first_three<<EOF" >> "$GITHUB_OUTPUT"
          echo "$FIRST_THREE" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Upload videos
        if: steps.changed.outputs.files != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-videos
          path: test-videos
          if-no-files-found: warn
      - name: Comment with videos
        if: steps.changed.outputs.files != '' && steps.process-videos.outputs.total_count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get video files
            const videoFiles = `${{ steps.process-videos.outputs.first_three }}`.split('\n').filter(f => f.trim());
            const totalCount = parseInt('${{ steps.process-videos.outputs.total_count }}');
            
            let commentBody = '📹 **Test Videos**\n\n';
            
            // Process first 3 videos for embedding
            for (let i = 0; i < Math.min(videoFiles.length, 3); i++) {
              const videoFile = videoFiles[i].trim();
              if (videoFile && fs.existsSync(videoFile)) {
                try {
                  const fileName = path.basename(videoFile);
                  const fileStats = fs.statSync(videoFile);
                  const fileSizeMB = (fileStats.size / (1024 * 1024)).toFixed(2);
                  
                  commentBody += `### ${fileName}\n`;
                  commentBody += `**Size:** ${fileSizeMB} MB\n\n`;
                  
                  // Embed video if it's small enough (< 10MB for base64 embedding)
                  if (fileStats.size < 10 * 1024 * 1024) {
                    try {
                      const videoData = fs.readFileSync(videoFile);
                      const base64Video = videoData.toString('base64');
                      const mimeType = fileName.endsWith('.webm') ? 'video/webm' : 'video/mp4';
                      
                      commentBody += `<video width="800" controls>\n`;
                      commentBody += `  <source src="data:${mimeType};base64,${base64Video}" type="${mimeType}">\n`;
                      commentBody += `  Your browser does not support the video tag.\n`;
                      commentBody += `</video>\n\n`;
                    } catch (error) {
                      console.log(`Error embedding video ${fileName}:`, error);
                      commentBody += `❌ Error embedding video (available in artifacts)\n\n`;
                    }
                  } else {
                    commentBody += `📁 Video too large for inline display (available in artifacts)\n\n`;
                  }
                } catch (error) {
                  console.log(`Error processing video file ${videoFile}:`, error);
                  const fileName = path.basename(videoFile);
                  commentBody += `### ${fileName}\n`;
                  commentBody += `❌ Error processing video file\n\n`;
                }
              }
            }
            
            // Add artifact link for all videos
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts`;
            
            commentBody += `---\n`;
            commentBody += `📦 **Download All Videos:** All ${totalCount} video(s) can be downloaded from the [workflow artifacts](${artifactUrl}).\n`;
            
            if (totalCount > 3) {
              commentBody += `\n> **Note:** Only the first 3 videos are shown above. ${totalCount - 3} additional video(s) are available in the artifacts.\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

