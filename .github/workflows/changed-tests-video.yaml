name: changed-test-videos
on:
  pull_request:
    # Run on all PRs to ensure we catch new test files
    types: [opened, synchronize, reopened]

jobs:
  record:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          playwright install --with-deps
      - name: Detect changed tests
        id: changed
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          echo "Comparing base branch: ${{ github.event.pull_request.base.ref }} with current commit: ${{ github.sha }}"
          
          # Get all current test files
          CURRENT_FILES=$(git ls-files tests/ | grep '\.py$' | sort)
          
          # Get all test files from the base branch
          BASE_FILES=$(git ls-tree -r --name-only origin/${{ github.event.pull_request.base.ref }} -- tests/ | grep '\.py$' | sort)
          
          # Find new test files (in current but not in base)
          NEW_FILES=$(comm -23 <(echo "$CURRENT_FILES") <(echo "$BASE_FILES") || true)
          
          # Find modified test files
          MODIFIED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} -- 'tests/**/*.py' || true)
          
          # Combine both lists
          CHANGED="$NEW_FILES"$'\n'"$MODIFIED_FILES"
          
          # Remove empty lines and duplicates
          CHANGED=$(echo "$CHANGED" | grep -v '^$' | sort | uniq || true)
          
          echo "Changed test files:"
          echo "$CHANGED"
          
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Run changed tests
        if: steps.changed.outputs.files != ''
        env:
          PLAYWRIGHT_VIDEO_MODE: on
        run: |
          mkdir -p test-videos
          echo "Running tests: ${{ steps.changed.outputs.files }}"
          # Convert multiline output to space-separated list
          TEST_FILES=$(echo "${{ steps.changed.outputs.files }}" | tr '\n' ' ')
          echo "Test files to run: $TEST_FILES"
          python -m pytest -v $TEST_FILES --video=on --output=test-videos
      - name: Upload videos
        if: steps.changed.outputs.files != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-videos
          path: test-videos
          if-no-files-found: warn
      - name: Comment link
        if: steps.changed.outputs.files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const url = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“¹ Playwright videos available [here](${url}).`
            });

