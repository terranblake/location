name: changed-test-videos

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 1) give the job write-access to issues
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
permissions:
  contents: read     # still needed for checkout
  issues: write      # create / update PR-comments

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  record:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          playwright install --with-deps

      # â€¦ (Detect changed tests, Run tests, Process videos, Upload videos) â€¦

      - name: Comment with videos
        if: steps.changed.outputs.files != '' && steps.process-videos.outputs.total_count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const path = require('path');

            // -----------------------------------------------------------------
            // build the comment body (unchanged)
            // -----------------------------------------------------------------
            const videoFiles = `${{ steps.process-videos.outputs.first_five }}`.split('\n').filter(Boolean);
            const totalCount = parseInt('${{ steps.process-videos.outputs.total_count }}', 10);

            let body = 'ðŸ“¹ **Test Videos Generated**\n\n';
            body += `âœ… Successfully recorded ${totalCount} test video(s) for the changed tests.\n\n`;

            for (const videoFile of videoFiles.slice(0, 5)) {
              try {
                const stats = fs.statSync(videoFile);
                body += `ðŸ“„ **${path.basename(videoFile)}** (${(stats.size / 1_048_576).toFixed(2)} MB)\n`;
              } catch {
                body += `ðŸ“„ **${path.basename(videoFile)}** (size unknown)\n`;
              }
            }
            if (totalCount > 5) body += `ðŸ“„ ... and ${totalCount - 5} more video(s)\n`;

            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts`;
            body += `\n---\nðŸ“¦ **Download Videos:** All ${totalCount} video(s) can be downloaded from the [workflow artifacts](${artifactUrl}).\n\n`;
            body += `> **How to view:** Download the artifact zip file, extract it, and open the .webm files in your browser or video player.\n`;

            // -----------------------------------------------------------------
            // 2) paginate over *all* comments so we always find the bot comment
            // -----------------------------------------------------------------
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner:  context.repo.owner,
                repo:   context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100
              }
            );

            const existing = comments.find(c =>
              c.user?.type === 'Bot' &&
              c.body.includes('ðŸ“¹ **Test Videos Generated**')
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
